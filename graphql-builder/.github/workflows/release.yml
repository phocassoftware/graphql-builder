name: Release
permissions:
    contents: write
    packages: write
on:
  workflow_dispatch:
    inputs:
      releaseType:
        type: choice
        description: "Release type"
        required: true
        default: minor
        options:
          - patch
          - minor
          - major
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: zulu
      - uses: whelk-io/maven-settings-xml-action@v22
        with:
          servers: >
            [
              { "id": "sonatype", "username": "${{ secrets.MVN_REPO_PRIVATE_REPO_USER }}", "password": "${{ secrets.MVN_REPO_PRIVATE_REPO_PASSWORD }}" }
            ]
      - name: set name
        run: |
          git config --global user.name "release-bot";
          git config --global user.email "release-bot@fleetpin.co.nz";

      - name: add key
        run: |
          echo  "${{ secrets.GPG_KEY }}" | base64 -d > private.key
          gpg --batch --import ./private.key
          rm ./private.key
          gpg --list-secret-keys --keyid-format LONG

      - name: Get current development version
        id: get_version
        run: |
          VERSION=$( mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//' )
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate versions
        id: generate_versions
        uses: WyriHaximus/github-action-next-semvers@v1.2.1
        with:
          version: ${{ steps.get_version.outputs.version }}

      - name: Pick release version
        id: pick_release_version
        run: |
          VERSION=$(
            case ${{ github.event.inputs.releaseType }} in
              ("minor") echo "${{ steps.generate_versions.outputs.minor }}" ;;
              ("major") echo "${{ steps.generate_versions.outputs.major }}" ;;
              ("patch") echo "${{ steps.generate_versions.outputs.patch }}" ;;
            esac
          )
          echo "version=$VERSION" >> $GITHUB_OUTPUT


      - name: prepare
        run: |
          mvn release:prepare -Dusername=${{ secrets.GITHUB_TOKEN }} \
          -DreleaseVersion=${{ steps.pick_release_version.outputs.version }} \
          -DdevelopmentVersion=${{ steps.pick_release_version.outputs.version }}-SNAPSHOT \
          -P sonatype

      - name: release
        run: |
          mvn release:perform -Dusername=${{ secrets.GITHUB_TOKEN }} \
          -DreleaseVersion=${{ steps.pick_release_version.outputs.version }} \
          -DdevelopmentVersion=${{ steps.pick_release_version.outputs.version }}-SNAPSHOT \
          -Darguments="-DskipTests" \
          -P sonatype
